   1.
      #       $OpenBSD: pf.conf,v 1.44 2009/06/10 15:29:34 sobrado Exp $
   2.
      #
   3.
      # See pf.conf(5) for syntax and examples; this sample ruleset uses
   4.
      # require-order to permit mixing of NAT/RDR and filter rules.
   5.
      # Remember to set net.inet.ip.forwarding=1 and/or net.inet6.ip6.forwarding=1
   6.
      # in /etc/sysctl.conf if packets are to be forwarded between interfaces.
   7.

   8.
      int_if = "xl0"
   9.
      ext_if = "dc0"
  10.
      wifi_if = "rl0"
  11.

  12.
      table <lan_net> {192.168.100.0/24}
  13.
      table <wifi_net> {192.168.182.0/24}
  14.
      client_out = "{ http https smtp smtps pop3 pop3s imap imaps ftp \
  15.
      ftp-data ssh }"
  16.
      icmp_types = "{ echoreq echorep unreach }"
  17.

  18.
      set skip on lo
  19.
      set block-policy return
  20.
      match in all scrub (no-df)
  21.

  22.
      # NAT/filter rules and anchors for ftp-proxy(8)
  23.
      #nat-anchor "ftp-proxy/*"
  24.
      #rdr-anchor "ftp-proxy/*"
  25.
      #rdr pass on ! egress proto tcp to port ftp -> 127.0.0.1 port 8021
  26.
      #anchor "ftp-proxy/*"
  27.
      #pass out proto tcp from $proxy to any port ftp
  28.

  29.
      # NAT/filter rules and anchors for relayd(8)
  30.
      #rdr-anchor "relayd/*"
  31.
      #anchor "relayd/*"
  32.

  33.
      # NAT rules and anchors for spamd(8)
  34.
      #table <spamd-white> persist
  35.
      #table <nospamd> persist file "/etc/mail/nospamd"
  36.
      #no rdr on egress proto tcp from <nospamd> to any port smtp
  37.
      #no rdr on egress proto tcp from <spamd-white> to any port smtp
  38.
      #rdr pass on egress proto tcp from any to any port smtp -> 127.0.0.1 port spamd
  39.

  40.
      nat on $ext_if from <lan_net> to any -> ($ext_if)
  41.
      nat on $ext_if from <wifi_net> to any -> ($ext_if)
  42.

  43.
      #pass           # to establish keep-state
  44.

  45.
      #block in quick from urpf-failed to any # use with care
  46.

  47.
      block all
  48.
      block in quick on $wifi_if os "windows"
  49.
      block in on em0 proto icmp fom any to any
  50.
      block in on em0 from <flood> to any #ignorer toutes les IP STOCK
  51.

  52.
      pass in on $int_if proto tcp from <lan_net> to any port \
  53.
      $client_out flags S/SA modulate state
  54.
      pass in on $int_if proto udp from <lan_net> to any port domain
  55.
      pass in on $int_if inet proto icmp from <lan_net> to any \
  56.
      icmp-type $icmp_types
  57.
      pass in on $wifi_if proto tcp from <wifi_net> to any port \
  58.
      $client_out flags S/SA modulate state
  59.
      pass in on $wifi_if proto udp from <wifi_net> to any port domain
  60.
      pass in on $wifi_if inet proto icmp from <wifi_net> to any \
  61.
      icmp-type $icmp_types
  62.
      pass out on $wifi_if proto tcp from <lan_net> to <wifi_net> port ssh
  63.
      pass out on $wifi_if proto tcp from <lan_net> to <192.168.182.50> port www
  64.
      pass out on $ext_if all
  65.
      pass in on $ext_if proto tcp from any to ($ext_if) port ssh
  66.
      ##..
  67.
      pass inet proto tcp from any to any port ssh synproxy state \
  68.
      (max-src-conn 10, max-src-conn-rate 3/30, overload <flood> flush global)
  69.
      pass inet proto tcp from any to any port ftp synproxy state \
  70.
      (max-src-conn 40, max-src-conn-rate 60/60, overload <flood> flush global)
  71.
      pass inet proto tcp from any to any port http synproxy state \
  72.
      (max-src-conn 40, max-src-conn-rate 60/60, overload <flood> flush global)
  73.
      pass inet proto udp from any to any port domain synproxy state \
  74.
      (max-src-conn 40, max-src-conn-rate 60/60, overload <flood> flush global)
  75.
      #permettre le MTU PATH DISCOVERY :
  76.
      pass inet proto icmp all icmp-type 3 code 4 synproxy state
